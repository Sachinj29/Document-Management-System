version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: dms-postgres
    environment:
      POSTGRES_DB: dms
      POSTGRES_USER: dms_user
      POSTGRES_PASSWORD: dms_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - dms-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dms_user -d dms"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dms-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - dms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  dms-app:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: dms-application
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_URL: jdbc:postgresql://postgres:5432/dms
      DATABASE_USERNAME: dms_user
      DATABASE_PASSWORD: dms_password
      REDIS_URL: redis://redis:6379
    volumes:
      - app_uploads:/app/uploads
      - app_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - dms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  postgres_data:
  redis_data:
  app_uploads:
  app_logs:

networks:
  dms-network:
    driver: bridge
